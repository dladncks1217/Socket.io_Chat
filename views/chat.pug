extends layout

block content
    h1= title
    a#exit-btn(href='/') 방 나가기
    #number
        | 참여자 수:
        #number-count= number
        | &nbsp
        span#myname
            | 내 이름:
            #my_name= name
    fieldset
        legend 채팅 내용
        #chat-list
            for chat in chats
                if chat.user === user
                    .mine(style='color:' + chat.user)
                        div= chat.user
                        if chat.gif
                            img(src='/gif/' + chat.gif)
                        else
                            div= chat.chat
                else if chat.user === 'system'
                    .system
                        div= chat.chat
                else
                    .other(style='color:' + chat.user)
                        div= chat.user
                        if chat.gif
                            img(src='/gif/' + chat.gif)
                        else
                            div= chat.chat
    form#chat-form(action='/chat' method='post' enctype='multipart/form-data')
        label(for='gif') GIF 올리기
        input#gif(type='file' name='gif' accept='image/gif')
        input#chat(name='chat')
        button(type='submit') 전송
    script(src='/socket.io/socket.io.js')
    script.
        function scrollfunc(){
            const submitchats = document.querySelector('#chat-list');
            submitchats.scrollTop = submitchats.scrollHeight;
        }
        let socket = io.connect('http://localhost:8005/chat', {//   /chat 네임스페이스. 채팅에 대한 이벤트만 받는 네임스페이스. 불필요한 실시간 정보가 전달 안되도록.
            path: '/socket.io'
        });
        socket.on('join', function (data) {
            document.querySelector('#number-count').textContent = data.number;
            document.querySelector('#my_name').textContent = data.name;
            document.querySelector('#my_name').style.color = data.name;
            let div = document.createElement('div');
            div.classList.add('system');
            let chat = document.createElement('div');
            div.textContent = data.chat;
            div.appendChild(chat);
            document.querySelector('#chat-list').appendChild(div);
            scrollfunc();
        });
        socket.on('exit', function (data) {
            document.querySelector('#number-count').textContent = data.number;
            let div = document.createElement('div');
            div.classList.add('system');
            let chat = document.createElement('div');
            div.textContent = data.chat;
            div.appendChild(chat);
            document.querySelector('#chat-list').appendChild(div);
            scrollfunc();
        });
        // 현재 시간 확인

            const now = new Date();
            let hour = now.getHours();
            let minutes = now.getMinutes();
            if (hour < 10) {
                hour = `0${hour}`;
            }
            if (minutes < 10) {
                minutes = `0${minutes}`
            }
            const nowtime = ` ${hour}:${minutes} `;


        socket.on('chat',function(data){    // 실시간 채팅이 올라오는 이벤트
            let div = document.createElement('div');
            if(data.user === '#{user}'){
                div.classList.add('mine');
            }else{
                div.classList.add('other');
            }
            let name = document.createElement('div');
            name.textContent = data.user;

            name.className = 'chat-user';

            // 귓속말 구현

            let dm = document.createElement('button');
            dm.textContent = '귓속말';
            dm.className = 'dm';
            dm.dataset.socket = data.socket;
            dm.addEventListener('click', sendDM);
            name.appendChild(dm);
            div.appendChild(name);
            if(data.chat){
                if(data.user==='#{user}') {
                    let time = document.createElement('span');
                    time.textContent = nowtime;
                    time.classList.add('now');
                    div.appendChild(time);
                    let chat = document.createElement('div');
                    chat.textContent = data.chat;
                    div.appendChild(chat);
                    setTimeout(scrollfunc,0);         // 다 태그 다 만들어지기 전에 함수 실행돼서 일단 setTimeout 으로 딜레이줌
                }else{
                    let chat = document.createElement('span');
                    chat.textContent = data.chat;
                    div.appendChild(chat);
                    chat.classList.add('chat2');
                    let time = document.createElement('span');
                    time.textContent = nowtime;
                    time.classList.add('now');
                    div.appendChild(time);
                    setTimeout(scrollfunc,0);
                }
            }else{
                if (data.user === '#{user}') {
                    let time = document.createElement('span');
                    time.textContent = nowtime;
                    time.classList.add('now');
                    div.appendChild(time);
                    let gif = document.createElement('img');
                    gif.src = '/gif/' + data.gif;
                    div.appendChild(gif);
                    setTimeout(scrollfunc,1000);
                }else{
                    let gif = document.createElement('img');
                    gif.src = '/gif/' + data.gif;
                    div.appendChild(gif);
                    chat.classList.add('chat2');
                    let time = document.createElement('span');
                    time.textContent = nowtime;
                    time.classList.add('now');
                    div.appendChild(time);
                    setTimeout(scrollfunc,1000);
                }

            }
            div.style.color = data.user;
            document.querySelector('#chat-list').appendChild(div);
        });
        // 채팅내용 서버로 웹소켓으로 전송할 수 있게 해주는 이벤트
        document.querySelector('#chat-form').addEventListener('submit', function(e){
            // 웹소켓 안쓰고 AJAX 로 HTTP 요청을 보낸다.
            e.preventDefault();
            if(e.target.chat.value){
                let xhr = new XMLHttpRequest();
                xhr.onload = function(){
                    if(xhr.status === 200){
                        e.target.chat.value = '';
                    }else{
                        console.error(xhr.responseText);
                    }
                };
                xhr.open('POST','/room/#{room._id}/chat');
                xhr.setRequestHeader('Content-Type','application/json');
                xhr.send(JSON.stringify({chat:this.chat.value, sid: socket.id}));  //귓속말 보내기 위해 socket.id도 같이 보냄.
            }
            document.getElementById('chat').value='';
            document.getElementById('chat').focus();
        });
        document.querySelector('#gif').addEventListener('change',function(e){  // 멀티파트로 업로드 할 것.(서버에서 multer로 받을예정)
            let formData = new FormData();
            let xhr = new XMLHttpRequest()
            formData.append('gif',e.target.files[0]);
            xhr.onload = function (){
                if(xhr.status == 200){
                    e.target.file = null;
                }else{
                    console.error(xhr.responseText);
                }
            };
            xhr.open('POST','/room/#{room._id}/gif');
            xhr.send(formData);

            // 자동 채팅창 포커싱
            document.getElementById('chat').value = '';
            document.getElementById('chat').focus();
        });
        let sendDM = function (e) {
            let id = e.target.dataset.socket;
            let prompt = window.prompt('귓속말을 입력하세요.');
            socket.emit('dm', {target: id, msg: prompt, from: '#{room.user}'});// socket.id는 그 사람의 소켓값이다.
            //이걸 알면 그 사람에게 메시지 보내기 가능.(귓속말을 보낼 타겟의 id)
        };
        // 귓속말 버튼 눌렀을때 sendDM할 수 있도록
        Array.prototype.forEach.call(document.querySelectorAll('.dm'),(el)=>{
            el.addEventListener('click',sendDM);
        });

        // 서버에서 보낸 데이터 클라이언트로
        socket.on('dm',(data)=>{
            alert(`${data.from} 님에게서 귓속말이 도착했습니다.: ${data.msg}`);
        });